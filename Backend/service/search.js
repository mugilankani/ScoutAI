// service/serp-api-client.ts

import axios from 'axios';
import { SerpApiSearchPayload, SerpResultItem } from './genkit-multi-payload-generator'; // Ensure SerpResultItem is defined and exported correctly

/**
 * Executes a series of search requests to the SerpApi Google Search API.
 *
 * @param searchPayloads An array of SerpApiSearchPayload objects generated by the LLM.
 * @param serpApiKey Your SerpApi API key.
 * @param addFilterPresent Optional. If true, appends "-Present" to each search query to filter out current roles.
 * @returns A Promise that resolves to an array of SerpResultItem objects (organic_results from all successful searches).
 */
export async function executeSerpSearches(
  searchPayloads: SerpApiSearchPayload[],
  serpApiKey: string,
  addFilterPresent: boolean = false // New optional parameter
): Promise<SerpResultItem[]> {
  const allOrganicResults: SerpResultItem[] = [];

  for (const payload of searchPayloads) {
    // Create a mutable copy of the payload
    const currentPayload = { ...payload };

    // --- NEW LOGIC START ---
    if (addFilterPresent) {
      currentPayload.q = `${currentPayload.q} -Present`; // Append "-Present" to the query string
      console.log(`[SerpApiClient] Modifying query: "${payload.q}" to "${currentPayload.q}"`);
    }
    // --- NEW LOGIC END ---

    // Construct the parameters for the SerpApi request
    const serpParams = { ...currentPayload, api_key: serpApiKey };

    console.log(`[SerpApiClient] Executing search for query: ${serpParams.q}`);

    try {
      const response = await axios.get('https://serpapi.com/search', { params: serpParams });

      if (response.data && response.data.organic_results && Array.isArray(response.data.organic_results)) {
        const results: SerpResultItem[] = response.data.organic_results.map((item: any) => ({
          position: item.position,
          title: item.title,
          link: item.link,
          snippet: item.snippet,
          snippet_highlighted_words: item.snippet_highlighted_words,
          source: item.source,
        }));
        allOrganicResults.push(...results);
        console.log(`[SerpApiClient] Successfully fetched ${results.length} results for: ${serpParams.q}`);
      } else {
        console.warn(`[SerpApiClient] No organic results found or unexpected response structure for query: ${serpParams.q}`);
        console.warn(`[SerpApiClient] Full response data: ${JSON.stringify(response.data)}`);
      }
    } catch (error) {
      if (axios.isAxiosError(error)) {
        console.error(`[SerpApiClient] Error fetching results for query '${serpParams.q}': ${error.message}`);
        if (error.response) {
          console.error(`[SerpApiClient] SerpApi Response Data: ${JSON.stringify(error.response.data)}`);
          console.error(`[SerpApiClient] SerpApi Status: ${error.response.status}`);
        }
      } else {
        console.error(`[SerpApiClient] An unexpected error occurred for query '${serpParams.q}':`, error);
      }
    }
  }

  console.log(`[SerpApiClient] Completed all searches. Total organic results collected: ${allOrganicResults.length}`);
  return allOrganicResults;
}

// Re-export SerpResultItem for use in other files, if it's primarily defined here
// Otherwise, it should be in a shared 'types.ts' file and imported from there.
export interface SerpResultItem {
  position: number;
  title: string;
  link: string;
  snippet: string;
  snippet_highlighted_words?: string[];
  source: string;
}